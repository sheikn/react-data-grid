{"version":3,"file":"bundle.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/grouprow.ts","../src/style/header.ts","../src/style/row.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/utils/domUtils.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useClickOutside.ts","../src/hooks/useGridDimensions.ts","../src/utils/colSpanUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useLatestFunc.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/FilterRow.tsx","../src/Cell.tsx","../src/editors/EditorContainer.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nconst cellFrozen = css`\n  position: sticky;\n  // Should have a higher value than 0 to show up above unfrozen cells\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: 2px 0 5px -2px rgba(136, 136, 136, .3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n\nconst cellSelected = css`\n  box-shadow: inset 0 0 0 2px var(--selection-color);\n`;\n\nexport const cellSelectedClassname = `rdg-cell-selected ${cellSelected}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --color: #000;\n  --border-color: #ddd;\n  --summary-border-color: #aaa;\n  --background-color: hsl(0deg 0% 100%);\n  --header-background-color: hsl(0deg 0% 97.5%);\n  --row-hover-background-color: hsl(0deg 0% 96%);\n  --row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --checkbox-color: hsl(207deg 100% 29%);\n  --checkbox-focus-color: hsl(207deg 100% 69%);\n  --checkbox-disabled-border-color: #ccc;\n  --checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --color: #ddd;\n  --border-color: #444;\n  --summary-border-color: #555;\n  --background-color: hsl(0deg 0% 13%);\n  --header-background-color: hsl(0deg 0% 10.5%);\n  --row-hover-background-color: hsl(0deg 0% 9%);\n  --row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --checkbox-color: hsl(207deg 100% 79%);\n  --checkbox-focus-color: hsl(207deg 100% 89%);\n  --checkbox-disabled-border-color: #000;\n  --checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --selection-color: #66afe9;\n  --font-size: 14px;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n  // We set a stacking context so internal elements don't render on top of external components.\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  font-size: var(--font-size);\n\n  // set stacking context in safari\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  &.rdg-dark {\n    ${darkTheme}\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst focusSink = css`\n  position: sticky;\n  top: 0;\n  left: 0;\n  height: 0;\n  width: 0;\n  outline: 0;\n`;\n\nexport const focusSinkClassname = `rdg-focus-sink ${focusSink}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n","import { css } from '@linaria/core';\nimport { rowSelected } from './row';\nimport { cell, cellFrozenLast } from './cell';\n\nconst groupRow = css`\n  &:not(.${rowSelected}) {\n    background-color: var(--header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nexport const groupRowClassname = `rdg-group-row ${groupRow}`;\n\nconst groupRowSelected = css`\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n    pointer-events: none;\n    z-index: 2;\n  }\n\n  > .${cell}:first-child {\n    // preserve left border on the first frozen cell after scrolling to the right\n    box-shadow: inset 2px 0 0 0 var(--selection-color);\n  }\n`;\n\n// TODO: rename class\nexport const groupRowSelectedClassname = `rdg-group-row-selected ${groupRowSelected}`;\n","import { css } from '@linaria/core';\n\nconst headerRowAndFilterRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-columns: var(--template-columns);\n  width: var(--row-width);\n  position: sticky;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n`;\n\nconst headerRow = css`\n  grid-template-rows: var(--header-row-height);\n  height: var(--header-row-height); // needed on Firefox\n  line-height: var(--header-row-height);\n  top: 0;\n  touch-action: none;\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRowAndFilterRow} ${headerRow}`;\n\nconst filterRow = css`\n  grid-template-rows: var(--filter-row-height);\n  height: var(--filter-row-height); // needed on Firefox\n  line-height: var(--filter-row-height);\n  top: var(--header-row-height);\n`;\n\nexport const filterRowClassname = `rdg-filter-row ${headerRowAndFilterRow} ${filterRow}`;\n","import { css } from '@linaria/core';\nimport { cell } from './cell';\n\nexport const row = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-rows: var(--row-height);\n  grid-template-columns: var(--template-columns);\n  position: absolute;\n  left: 0;\n  width: var(--row-width);\n  height: var(--row-height); // needed on Firefox\n  line-height: var(--row-height);\n  background-color: var(--background-color);\n\n  &:hover {\n    background-color: var(--row-hover-background-color);\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  background-color: var(--row-selected-background-color);\n\n  &:hover {\n    background-color: var(--row-selected-hover-background-color);\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n\nconst summaryRow = css`\n  position: sticky;\n  z-index: 3;\n  grid-template-rows: var(--summary-row-height);\n  height: var(--summary-row-height); // needed on Firefox\n  line-height: var(--summary-row-height);\n\n  > .${cell} {\n    border-top: 2px solid var(--summary-border-color);\n  }\n`;\n\nexport const summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean | undefined) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  margin-right: 1px; // align checkbox in row group cell\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--border-color);\n  background-color: var(--background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--checkbox-disabled-border-color);\n    background-color: var(--checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>,\n  | 'disabled'\n  | 'tabIndex'\n  | 'onClick'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected?: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d .1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const cellRef = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={cellRef}\n      className={groupCellContentClassname}\n      tabIndex={-1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname}>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","import { SelectCellFormatter } from './formatters';\nimport type { Column } from './types';\nimport { stopPropagation } from './utils/domUtils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onClick={stopPropagation}\n        onChange={props.onRowSelectionChange}\n      />\n    );\n  },\n  groupFormatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select Group\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onChange={props.onRowSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  }\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, ColumnMetric } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy?: readonly string[];\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo(() => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map(rawColumn => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: CalculatedColumn<R, SR> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan !== undefined) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo(() => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.key}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = Math.min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = Math.max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = Math.min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return Math.floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = Math.max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return Math.min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useRef, useEffect } from 'react';\n\n/**\n * Detecting outside click on a react component is surprisingly hard.\n * A general approach is to have a global click handler on the document\n * which checks if the click target is inside the editor container or\n * not using editorContainer.contains(e.target). This approach works well\n * until portals are used for editors. Portals render children into a DOM\n * node that exists outside the DOM hierarchy of the parent component so\n * editorContainer.contains(e.target) does not work. Here are some examples\n * of the DOM structure with different types of editors\n *\n *\n * SimpleEditor for example Texbox (No Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        <div simple-editor>..</div>\n *      </div>\n *   </div>\n *\n * ComplexEditor for example Modals (using Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        // Nothing here\n *      </div>\n *   </div>\n *   <div portal-created-by-the-editor>\n *     <div complex-editor>..</div>\n *   </div>\n *\n *\n * One approach to detect outside click is to use synthetic event bubbling through\n * portals. An event fired from inside a portal will propagate to ancestors\n * in the containing React tree, even if those elements are not ancestors\n * in the DOM tree. This means a click handler can be attached on the window\n * and on the editor container. The editor container can set a flag to notify\n * that the click was inside the editor and the window click handler can use\n * this flag to call onClickOutside. This approach however has a few caveats\n * - Click handler on the window is set using window.addEventListener\n * - Click handler on the editor container is set using onClick prop\n *\n * This means if a child component inside the editor calls e.stopPropagation\n * then the click handler on the editor container will not be called whereas\n * the document click handler will be called.\n * https://github.com/facebook/react/issues/12518\n *\n * To solve this issue onClickCapture event is used.\n */\n\nexport function useClickOutside(onClick: () => void) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  function cancelAnimationFrameRequest() {\n    if (typeof frameRequestRef.current === 'number') {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `handleDocumentClick` might otherwise miss valid click events.\n  // To that end we instead access the latest `onClick` prop via a ref.\n  const onClickRef = useRef((): void => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    onClickRef.current = onClick;\n  });\n\n  useEffect(() => {\n    function onOutsideClick() {\n      frameRequestRef.current = undefined;\n      onClickRef.current();\n    }\n\n    function onWindowCaptureClick() {\n      cancelAnimationFrameRequest();\n      frameRequestRef.current = requestAnimationFrame(onOutsideClick);\n    }\n\n    window.addEventListener('click', onWindowCaptureClick, { capture: true });\n\n    return () => {\n      window.removeEventListener('click', onWindowCaptureClick, { capture: true });\n      cancelAnimationFrameRequest();\n    };\n  }, []);\n\n  return cancelAnimationFrameRequest;\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\nexport function useGridDimensions(): [ref: React.RefObject<HTMLDivElement>, width: number, height: number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in jest/jsdom and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      setGridWidth(clientWidth);\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(column: CalculatedColumn<R, SR>, lastFrozenColumnIndex: number, args: ColSpanArgs<R, SR>) {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan)\n    && colSpan! > 1\n    // ignore colSpan if it spans over both frozen and regular columns\n    && (!column.frozen || (column.idx + colSpan! - 1) <= lastFrozenColumnIndex)\n  ) {\n    return colSpan;\n  }\n  return undefined;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows, isGroupRow }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return column.editor != null\n    && !column.rowGroup\n    && !isGroupRow(row)\n    && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  currentPosition: Readonly<Position>;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  currentPosition,\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  const rowsCount = rows.length;\n  let position = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    const row = rows[position.rowIdx];\n    if (!isGroupRow(row)) {\n      // If a cell within the colspan range is selected then move to the\n      // previous or the next cell depending on the navigation direction\n      const posIdx = position.idx;\n      for (const column of colSpanColumns) {\n        const colIdx = column.idx;\n        if (colIdx > posIdx) break;\n        const colSpan = getColSpan<R, SR>(column, lastFrozenColumnIndex, { type: 'ROW', row });\n        if (colSpan && posIdx > colIdx && posIdx < colSpan + colIdx) {\n          position.idx = colIdx + (moveRight ? colSpan : 0);\n          break;\n        }\n      }\n    }\n  };\n\n  if (isCellWithinBounds(position)) {\n    setColSpan(position.idx - currentPosition.idx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          position = {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else {\n        position = {\n          rowIdx,\n          idx: 0\n        };\n      }\n      setColSpan(true);\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          position = {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else {\n        position = {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n    setColSpan(false);\n  }\n\n  return position;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({ cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx }, shiftKey }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport function assertIsValidKeyGetter<R>(keyGetter: unknown): asserts keyGetter is (row: R) => React.Key {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(column: CalculatedColumn<R, SR>, colSpan?: number): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--frozen-left-${column.key})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(column: CalculatedColumn<R, SR>, ...extraClasses: Parameters<typeof clsx>): string {\n  return clsx(\n    cellClassname, {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: readonly SR[] | undefined;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  enableFilterRow: boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  enableFilterRow,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && (colIdx + colSpan) > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) break;\n\n      // check filter row\n      if (enableFilterRow && updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'FILTER' }))) break;\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))) break;\n      }\n\n      // check summary rows\n      if (summaryRows !== undefined) {\n        for (const row of summaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row }))) break;\n        }\n      }\n    }\n\n    return startIdx;\n  }, [rowOverscanStartIdx, rowOverscanEndIdx, rows, summaryRows, colOverscanStartIdx, lastFrozenColumnIndex, colSpanColumns, isGroupRow, enableFilterRow]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport type { GroupRow, GroupByDictionary } from '../types';\n\nconst RENDER_BACTCH_SIZE = 8;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number;\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  enableVirtualization: boolean;\n}\n\n// https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || !rowGrouper) return [undefined, rawRows.length];\n\n    const groupRows = (rows: readonly R[], [groupByKey, ...remainingGroupByKeys]: readonly string[], startRowIndex: number): [GroupByDictionary<R>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0\n          ? [childRows, childRows.length]\n          : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo(() => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (rows: GroupByDictionary<R> | readonly R[], parentId: string | undefined, level: number): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n\n  if (!enableVirtualization) {\n    return {\n      rowOverscanStartIdx: 0,\n      rowOverscanEndIdx: rows.length - 1,\n      rows,\n      rowsCount,\n      isGroupRow\n    };\n  }\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = Math.floor(scrollTop / rowHeight);\n  const rowVisibleEndIdx = Math.min(rows.length - 1, Math.floor((scrollTop + clientHeight) / rowHeight));\n  const rowOverscanStartIdx = Math.max(0, Math.floor((rowVisibleStartIdx - overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n  const rowOverscanEndIdx = Math.min(rows.length - 1, Math.ceil((rowVisibleEndIdx + overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    isGroupRow\n  };\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { css } from '@linaria/core';\nimport type { HeaderCellProps } from '../HeaderCell';\nimport type { SortDirection } from '../types';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<HeaderCellProps<R, SR>,\n  | 'column'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  column,\n  onSort,\n  sortColumn,\n  sortDirection,\n  children\n}: Props<R, SR>) {\n  sortDirection = sortColumn === column.key && sortDirection || 'NONE';\n  let sortText = '';\n  if (sortDirection === 'ASC') {\n    sortText = '\\u25B2';\n  } else if (sortDirection === 'DESC') {\n    sortText = '\\u25BC';\n  }\n\n  function onClick() {\n    if (!onSort) return;\n    const { sortDescendingFirst } = column;\n    let direction: SortDirection;\n    switch (sortDirection) {\n      case 'ASC':\n        direction = sortDescendingFirst ? 'NONE' : 'DESC';\n        break;\n      case 'DESC':\n        direction = sortDescendingFirst ? 'ASC' : 'NONE';\n        break;\n      default:\n        direction = sortDescendingFirst ? 'DESC' : 'ASC';\n        break;\n    }\n    onSort(column.key, direction);\n  }\n\n  return (\n    <span className={headerSortCellClassname} onClick={onClick}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortText}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortDirection } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\n\nconst cellResizable = css`\n  &::after {\n    content: \"\";\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nfunction getAriaSort(sortDirection?: SortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n    case 'DESC':\n      return 'descending';\n    default:\n      return 'none';\n  }\n}\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan?: number;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp(event);\n        return;\n      }\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          column={column}\n          onSort={onSort}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={sortColumn === column.key ? getAriaSort(sortDirection) : undefined}\n      aria-colspan={colSpan}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { assertIsValidKeyGetter, getColSpan } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { headerRowClassname } from './style';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKeyGetter'\n>;\n\nexport interface HeaderRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  lastFrozenColumnIndex: number;\n}\n\nfunction HeaderRow<R, SR>({\n  columns,\n  rows,\n  rowKeyGetter,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort,\n  lastFrozenColumnIndex\n}: HeaderRowProps<R, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n\n    const newSelectedRows = new Set<React.Key>(checked ? rows.map(rowKeyGetter) : undefined);\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKeyGetter]);\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        onResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={handleAllRowsSelectionChange}\n        onSort={onSort}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR>(props: HeaderRowProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, Filters } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport { filterRowClassname } from './style';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\ninterface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={2}\n      className={filterRowClassname}\n    >\n      {columns.map(column => {\n        const { key } = column;\n\n        return (\n          <div\n            key={key}\n            className={getCellClassname(column)}\n            style={getCellStyle(column)}\n          >\n            {column.filterRenderer && (\n              <column.filterRenderer\n                column={column}\n                value={filters?.[column.key]}\n                onChange={value => onChange(key, value)}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo } from 'react';\nimport type { RefAttributes } from 'react';\nimport { css } from '@linaria/core';\n\nimport { cellSelectedClassname } from './style';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--selection-color);\n    background-color: var(--background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  dragHandleProps,\n  onRowClick,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  selectRow,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    {\n      [cellSelectedClassname]: isCellSelected,\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(rowIdx, row, column);\n    onClick?.(event);\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    selectCellWrapper();\n    onContextMenu?.(event);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    selectCellWrapper(true);\n    onDoubleClick?.(event);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(rowIdx, newRow);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      ref={ref}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            rowIdx={rowIdx}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n            onRowChange={handleRowChange}\n          />\n          {dragHandleProps && (\n            <div className={cellDragHandleClassname} {...dragHandleProps} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { createPortal } from 'react-dom';\nimport { css } from '@linaria/core';\n\nimport type { EditorProps } from '../types';\nimport { useClickOutside } from '../hooks';\n\nconst editorContainer = css`\n  display: contents;\n`;\n\nconst editorContainerClassname = `rdg-editor-container ${editorContainer}`;\n\nexport default function EditorContainer<R, SR>({\n  row,\n  column,\n  onRowChange,\n  ...props\n}: EditorProps<R, SR>) {\n  const onClickCapture = useClickOutside(() => onRowChange(row, true));\n  if (column.editor === undefined) return null;\n\n  const editor = (\n    <div className={editorContainerClassname} onClickCapture={onClickCapture}>\n      <column.editor\n        row={row}\n        column={column}\n        onRowChange={onRowChange}\n        {...props}\n      />\n    </div>\n  );\n\n  if (column.editorOptions?.createPortal) {\n    return createPortal(editor, props.editorPortalTarget);\n  }\n\n  return editor;\n}\n","import { useState, useCallback } from 'react';\nimport { css } from '@linaria/core';\n\nimport { cellSelectedClassname } from './style';\nimport EditorContainer from './editors/EditorContainer';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps, SharedEditorProps, Omit } from './types';\n\nconst cellEditing = css`\n  padding: 0;\n`;\n\nconst cellEditingClassname = `rdg-cell-editing ${cellEditing}`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n  | 'rowIdx'\n  | 'row'\n  | 'column'\n  | 'colSpan'\n>;\n\ninterface EditCellProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorProps: SharedEditorProps<R>;\n}\n\nexport default function EditCell<R, SR>({\n  className,\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  editorProps,\n  ...props\n}: EditCellProps<R, SR>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    cellSelectedClassname,\n    cellEditingClassname,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    return (\n      <EditorContainer\n        {...editorProps}\n        rowIdx={rowIdx}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={cellRef}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { groupRowSelectedClassname, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan } from './utils';\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport type { RowRendererProps, SelectedCellProps } from './types';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  onRowClick,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  top,\n  onRowChange,\n  selectCell,\n  selectRow,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      [rowSelectedClassname]: isRowSelected,\n      [groupRowSelectedClassname]: selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellProps?.idx === column.idx;\n    if (selectedCellProps?.mode === 'EDIT' && isCellSelected) {\n      cells.push(\n        <EditCell<R, SR>\n          key={column.key}\n          rowIdx={rowIdx}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          onKeyDown={selectedCellProps.onKeyDown}\n          editorProps={selectedCellProps.editorProps}\n        />\n      );\n      continue;\n    }\n\n    cells.push(\n      <CellRenderer\n        key={column.key}\n        rowIdx={rowIdx}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCopied={copiedCellIdx === column.idx}\n        isDraggedOver={draggedOverCellIdx === column.idx}\n        isCellSelected={isCellSelected}\n        isRowSelected={isRowSelected}\n        dragHandleProps={isCellSelected ? (selectedCellProps as SelectedCellProps).dragHandleProps : undefined}\n        onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n        onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n        onRowClick={onRowClick}\n        onRowChange={onRowChange}\n        selectCell={selectCell}\n        selectRow={selectRow}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      onMouseEnter={handleDragEnter}\n      style={{ top }}\n      {...props}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { cellSelectedClassname } from './style';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<GroupRowRendererProps<R, SR>,\n  | 'id'\n  | 'rowIdx'\n  | 'groupKey'\n  | 'childRows'\n  | 'isExpanded'\n  | 'isRowSelected'\n  | 'selectRow'\n  | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  column,\n  groupColumnIndex,\n  selectRow,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  function onRowSelectionChange(checked: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick: false });\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={getCellClassname(column, {\n        [cellSelectedClassname]: isCellSelected\n      })}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { groupRowClassname, groupRowSelectedClassname, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, Position, SelectRowEvent, Omit } from './types';\n\nexport interface GroupRowRendererProps<R, SR = unknown> extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  top: number;\n  level: number;\n  selectedCellIdx?: number;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectCell: (position: Position, enableEditor?: boolean) => void;\n  selectRow: (selectRowEvent: SelectRowEvent) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  selectRow,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-level={level}\n      aria-expanded={isExpanded}\n      className={clsx(\n        rowClassname,\n        groupRowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n          [rowSelectedClassname]: isRowSelected,\n          [groupRowSelectedClassname]: selectedCellIdx === -1 // Select row if there is no selected cell\n        }\n      )}\n      onClick={selectGroup}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <GroupCell<R, SR>\n          key={column.key}\n          id={id}\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          isExpanded={isExpanded}\n          isRowSelected={isRowSelected}\n          isCellSelected={selectedCellIdx === column.idx}\n          column={column}\n          groupColumnIndex={idx}\n          selectRow={selectRow}\n          toggleGroup={toggleGroup}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column' | 'colSpan'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row\n}: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(column,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { rowClassname, summaryRowClassname } from './style';\nimport { getColSpan } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>,\n  | 'viewportColumns'\n  | 'rowIdx'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n  lastFrozenColumnIndex: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  lastFrozenColumnIndex,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`${rowClassname} rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'} ${summaryRowClassname}`}\n      style={{ bottom }}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback\n} from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { rootClassname, viewportDraggingClassname, focusSinkClassname } from './style';\nimport { useGridDimensions, useCalculatedColumns, useViewportColumns, useViewportRows, useLatestFunc } from './hooks';\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport {\n  assertIsValidKeyGetter,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  SelectedCellProps,\n  EditCellProps,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortDirection\n} from './types';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<Column<R, SR>,\n  | 'formatter'\n  | 'minWidth'\n  | 'resizable'\n  | 'sortable'\n>;\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nconst body = globalThis.document?.body;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\ntype SharedDivProps = Pick<React.HTMLAttributes<HTMLDivElement>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: (row: R) => React.Key;\n  onRowsChange?: (rows: R[], data: RowsChangeData<R, SR>) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n  /** The height of each summary row in pixels */\n  summaryRowHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<React.Key>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<React.Key>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Readonly<Filters>;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  groupBy?: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange?: (expandedGroupIds: Set<unknown>) => void;\n  onFill?: (event: FillEvent<R>) => R[];\n  onPaste?: (event: PasteEvent<R>) => R;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilterRow?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n  enableVirtualization?: boolean;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKeyGetter,\n  onRowsChange,\n  // Dimensions props\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  summaryRowHeight = rowHeight,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  filters,\n  onFiltersChange,\n  defaultColumnOptions,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  // Custom renderers\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer: EmptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onFill,\n  onPaste,\n  // Toggles and modes\n  enableFilterRow = false,\n  cellNavigationMode = 'NONE',\n  enableVirtualization = true,\n  // Miscellaneous\n  editorPortalTarget = body,\n  className,\n  style,\n  rowClass,\n  // ARIA\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy\n}: DataGridProps<R, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowWrapper = useLatestFunc(selectRow);\n  const selectCellWrapper = useLatestFunc(selectCell);\n  const toggleGroupWrapper = useLatestFunc(toggleGroup);\n  const handleFormatterRowChangeWrapper = useLatestFunc(updateRow);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = enableFilterRow ? 2 : 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight = headerRowHeight + (enableFilterRow ? headerFiltersHeight : 0);\n  const clientHeight = gridHeight - totalHeaderHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const { rowOverscanStartIdx, rowOverscanEndIdx, rows, rowsCount, isGroupRow } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    enableFilterRow,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n\n  // Cell drag is not supported on a treegrid\n  const enableCellDragAndDrop = hasGroups ? false : onFill !== undefined;\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT' || !isCellWithinBounds(selectedPosition)) return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: rowIdx * rowHeight,\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n  * callbacks\n  */\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number) => {\n    setColumnWidths(columnWidths => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(column.key, width);\n      return newColumnWidths;\n    });\n\n    onColumnResize?.(column.idx, width);\n  }, [onColumnResize]);\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n  * event handlers\n  */\n  function selectRow({ rowIdx, checked, isShiftClick }: SelectRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    const row = rows[rowIdx];\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = Math.sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function onGridFocus() {\n    if (!isCellWithinBounds(selectedPosition)) {\n      // Tabbing into the grid should initiate keyboard navigation\n      const initialPosition: SelectCellState = { idx: 0, rowIdx: 0, mode: 'SELECT' };\n      if (isCellWithinBounds(initialPosition)) {\n        setSelectedPosition(initialPosition);\n      }\n    } else {\n      // otherwise if we already have a selected cell, we should scroll back to it when focusing the grid\n      scrollToCell(selectedPosition);\n    }\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, keyCode } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      onPaste\n      && isCtrlKeyHeldDown(event)\n      && isCellWithinBounds(selectedPosition)\n      && !isGroupRow(row)\n      && selectedPosition.idx !== -1\n      && selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition)\n      && isGroupRow(row)\n      && selectedPosition.idx === -1\n      && (\n        // Collapse the current group row if it is focused and is in expanded state\n        (key === 'ArrowLeft' && row.isExpanded)\n        // Expand the current group row if it is focused and is in collapsed state\n        || (key === 'ArrowRight' && !row.isExpanded)\n      )) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const updatedRows = [...rawRows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor === undefined\n      || selectedPosition.mode === 'SELECT'\n      || selectedPosition.row === selectedPosition.originalRow) {\n      return;\n    }\n\n    const rowIdx = getRawRowIdx(selectedPosition.rowIdx);\n    updateRow(rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    if (\n      !onPaste\n      || !onRowsChange\n      || copiedCell === null\n      || !isCellEditable(selectedPosition)\n    ) {\n      return;\n    }\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined || !onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    const targetRows = rawRows.slice(startRowIndex, endRowIndex);\n    const column = columns[idx];\n    const updatedTargetRows = onFill({ columnKey: column.key, sourceRow, targetRows });\n    const updatedRows = [...rawRows];\n    const indexes: number[] = [];\n\n    for (let i = startRowIndex; i < endRowIndex; i++) {\n      updatedRows[i] = updatedTargetRows[i - startRowIndex];\n      indexes.push(i);\n    }\n\n    onRowsChange(updatedRows, { indexes, column });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    if (!onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const targetRows = rawRows.slice(rowIdx + 1);\n    const column = columns[idx];\n    const updatedTargetRows = onFill({ columnKey: column.key, sourceRow, targetRows });\n    const updatedRows = [...rawRows];\n    const indexes: number[] = [];\n\n    for (let i = rowIdx + 1; i < updatedRows.length; i++) {\n      updatedRows[i] = updatedTargetRows[i - rowIdx - 1];\n      indexes.push(i);\n    }\n\n    onRowsChange(updatedRows, { indexes, column });\n  }\n\n  function handleEditorRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      updateRow(getRawRowIdx(selectedPosition.rowIdx), row);\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position, isGroupRow });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n      const row = rows[rowIdx];\n      if (!isGroupRow(row)) {\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n        if (colSpan !== undefined) {\n          const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n          right = left + width;\n        }\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft'\n      && isRowSelected\n      && isGroupRow(row)\n      && !row.isExpanded\n      && row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: columns.length - 1, rowIdx };\n      case 'PageUp':\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case 'PageDown':\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation = columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (canExitGrid({ shiftKey, cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE'\n        ? 'CHANGE_ROW'\n        : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition: getNextPosition(key, ctrlKey, shiftKey),\n      isCellWithinBounds,\n      isGroupRow\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver = rowIdx < draggedOverRowIdx\n      ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n      : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorProps: {\n          editorPortalTarget,\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleEditorRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps: enableCellDragAndDrop && isCellEditable(selectedPosition)\n        ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n        : undefined\n    };\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        rowElements.push(\n          <GroupRowRenderer<R, SR>\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedPosition.rowIdx === rowIdx ? selectedPosition.idx : undefined}\n            isRowSelected={isSelectable && row.childRows.every(cr => selectedRows?.has(rowKeyGetter!(cr)))}\n            onFocus={selectedPosition.rowIdx === rowIdx ? handleFocus : undefined}\n            onKeyDown={selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined}\n            selectCell={selectCellWrapper}\n            selectRow={selectRowWrapper}\n            toggleGroup={toggleGroupWrapper}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key: React.Key = hasGroups ? startRowIndex : rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n          onRowChange={handleFormatterRowChangeWrapper}\n          selectCell={selectCellWrapper}\n          selectRow={selectRowWrapper}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(rootClassname, { [viewportDraggingClassname]: isDragging }, className)}\n      style={{\n        ...style,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--filter-row-height': `${headerFiltersHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`,\n        '--summary-row-height': `${summaryRowHeight}px`,\n        ...layoutCssVars\n      } as unknown as React.CSSProperties}\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, SR>\n        rowKeyGetter={rowKeyGetter}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n        lastFrozenColumnIndex={lastFrozenColumnIndex}\n      />\n      {enableFilterRow && (\n        <FilterRow<R, SR>\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && EmptyRowsRenderer ? <EmptyRowsRenderer /> : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className={focusSinkClassname}\n            onKeyDown={handleKeyDown}\n            onFocus={onGridFocus}\n          />\n          <div style={{ height: Math.max(rows.length * rowHeight, clientHeight) }} />\n          {getViewportRows()}\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={summaryRowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown>(props: DataGridProps<R, SR> & RefAttributes<DataGridHandle>) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow = unknown>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={event => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","cellSelected","cellSelectedClassname","root","rootClassname","focusSink","focusSinkClassname","viewportDragging","viewportDraggingClassname","groupRow","groupRowClassname","groupRowSelected","groupRowSelectedClassname","headerRowAndFilterRow","headerRow","headerRowClassname","filterRow","filterRowClassname","row","rowClassname","rowSelected","rowSelectedClassname","summaryRow","summaryRowClassname","useFocusRef","isCellSelected","ref","useRef","useLayoutEffect","current","focus","preventScroll","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","SelectCellFormatter","value","tabIndex","disabled","onClick","onChange","ariaLabel","ariaLabelledBy","inputRef","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","_jsx","ValueFormatter","props","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","cellRef","handleKeyDown","d","stopPropagation","event","SELECT_COLUMN_KEY","SelectColumn","name","width","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","isRowSelected","onRowSelectionChange","groupFormatter","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","columns","colSpanColumns","lastFrozenColumnIndex","groupBy","useMemo","map","rawColumn","rowGroup","includes","idx","isLastFrozenColumn","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","colSpan","undefined","layoutCssVars","totalColumnWidth","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","unallocatedWidth","unallocatedColumnWidth","has","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","length","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","Math","min","colVisibleStartIdx","colVisibleEndIdx","max","test","floor","parseInt","useClickOutside","frameRequestRef","cancelAnimationFrameRequest","cancelAnimationFrame","onClickRef","Error","useEffect","onOutsideClick","onWindowCaptureClick","requestAnimationFrame","window","addEventListener","capture","removeEventListener","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","ResizeObserver","resizeObserver","clientWidth","clientHeight","observe","disconnect","getColSpan","args","Number","isInteger","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","rows","isGroupRow","rowIdx","editor","editable","getNextSelectedCellPosition","cellNavigationMode","currentPosition","nextPosition","isCellWithinBounds","rowsCount","position","setColSpan","moveRight","posIdx","colIdx","type","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","assertIsValidKeyGetter","keyGetter","getCellStyle","gridColumnStart","gridColumnEnd","getCellClassname","extraClasses","useViewportColumns","summaryRows","rowOverscanStartIdx","rowOverscanEndIdx","enableFilterRow","startIdx","updateStartIdx","viewportColumns","RENDER_BACTCH_SIZE","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","setSize","add","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","ceil","useLatestFunc","fn","useCallback","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","SortableHeaderCell","onSort","sortColumn","sortDirection","children","sortText","sortDescendingFirst","direction","cellResizable","cellResizableClassname","getAriaSort","HeaderCell","onResize","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","offset","clientX","onPointerMove","onPointerUp","preventDefault","getCell","className","headerCellClass","HeaderRow","rowKeyGetter","onSelectedRowsChange","onColumnResize","handleAllRowsSelectionChange","newSelectedRows","cells","index","memo","FilterRow","filters","onFiltersChange","newFilters","filterRenderer","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","cellDragHandle","cellDragHandleClassname","Cell","isCopied","isDraggedOver","dragHandleProps","onRowClick","onDoubleClick","onContextMenu","onRowChange","selectCell","selectRow","cellClass","selectCellWrapper","openEditor","handleClick","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","isShiftClick","forwardRef","editorContainer","editorContainerClassname","EditorContainer","onClickCapture","createPortal","editorPortalTarget","cellEditing","cellEditingClassname","EditCell","editorProps","dimensions","setDimensions","node","top","getCellContent","docTop","docLeft","document","scrollingElement","documentElement","gridLeft","gridTop","Row","cellRenderer","CellRenderer","copiedCellIdx","draggedOverCellIdx","selectedCellProps","rowClass","setDraggedOverRowIdx","onMouseEnter","ariaRowIndex","ariaSelected","handleDragEnter","mode","onKeyDown","onFocus","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","selectedCellIdx","selectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","bottom","body","globalThis","DataGrid","onRowsChange","headerRowHeight","headerFiltersHeight","summaryRowHeight","selectedRows","onExpandedGroupIdsChange","rowRenderer","RowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onFill","onPaste","style","ariaDescribedBy","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","setDragging","draggedOverRowIdx","setOverRowIdx","focusSinkRef","prevSelectedPosition","latestDraggedOverRowIdx","lastSelectedRowIdx","isCellFocusable","selectRowWrapper","handleFormatterRowChangeWrapper","updateRow","headerRowsCount","summaryRowsCount","totalHeaderHeight","isSelectable","hasGroups","minColIdx","enableCellDragAndDrop","scrollToCell","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","childRow","rowKey","delete","previousRowIdx","step","sign","expandedGroupId","newExpandedGroupIds","onGridFocus","initialPosition","keyCode","cKey","vKey","handleCopy","handlePaste","closeEditor","navigate","handleCellInput","handleFocus","handleScroll","getRawRowIdx","updatedRows","indexes","commitEditorChanges","originalRow","columnKey","targetRow","isCellEditable","updatedTargetRow","sourceRow","sourceColumnKey","targetColumnKey","onCellKeyDown","isDefaultPrevented","handleDragEnd","overRowIdx","endRowIndex","targetRows","slice","updatedTargetRows","handleMouseDown","onMouseOver","onMouseUp","handleEditorRowChange","commitChanges","handleOnClose","enableEditor","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRowIdx","parentRow","onNavigation","getDraggedOverCellIdx","currentRowIdx","getSelectedCellProps","onClose","onMouseDown","getViewportRows","rowElements","every","cr","findIndex","c","size","height","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor"],"mappings":"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"}